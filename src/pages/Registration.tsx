import React, { useState } from 'react';
import '../styles/registration.css'
import { useLocation } from 'react-router-dom';
import { mdiClockTimeThree, mdiMapMarker, mdiAlert, mdiClose } from '@mdi/js';
import Icon from '@mdi/react';
import { Api } from '../api/api';
// @ts-ignore
import InputMask from 'react-input-mask';
import { Modal } from 'react-bootstrap';
import { Game } from '../components/GameCard';

// - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É

type RegistrationProps = {
  game: Game
};
export default function Registration() {

  const api = new Api()
  
  const location = useLocation();
  // Access query parameters
  const game = location.state?.game;
  const nidNumber = game?.id
  const ordinalMap: { [key: number]: string } = {
    1: '–ü–µ—Ä–≤–∞—è',
    2: '–í—Ç–æ—Ä–∞—è',
    3: '–¢—Ä–µ—Ç—å—è',
    4: '–ß–µ—Ç–≤–µ—Ä—Ç–∞—è',
    5: '–ü—è—Ç–∞—è',
    6: '–®–µ—Å—Ç–∞—è',
    7: '–°–µ–¥—å–º–∞—è',
    8: '–í–æ—Å—å–º–∞—è',
    9: '–î–µ–≤—è—Ç–∞—è',
    10: '–î–µ—Å—è—Ç–∞—è',
    11: '–û–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–∞—è',
    12: '–î–≤–µ–Ω–∞–¥—Ü–∞—Ç–∞—è',
    // Add more if needed
  };

  const dialogMap: { [key: number]: string } = {
    1: '–ø–µ—Ä–≤–æ–π',
    2: '–≤—Ç–æ—Ä–æ–π',
    3: '—Ç—Ä–µ—Ç—å–µ–π',
    4: '—á–µ—Ç–≤—ë—Ä—Ç–æ–π',
    5: '–ø—è—Ç–æ–π',
    6: '—à–µ—Å—Ç–æ–π',
    7: '—Å–µ–¥—å–º–æ–π',
    8: '–≤–æ—Å—å–º–æ–π',
    9: '–¥–µ–≤—è—Ç–æ–π',
    10: '–¥–µ—Å—è—Ç–æ–π',
    11: '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–π',
    12: '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–π',
    // Add more if needed
  };
  
  const getOrdinal = (num: number) => {
    return ordinalMap[num] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'; // Default for unknown numbers
  };

  const getDialogMap = (num: number) => {
    return dialogMap[num] || '–æ—á–µ—Ä–µ–¥–Ω–æ–π';
  }

  // Initialize form state
  const [form, setForm] = useState({
    game_id: nidNumber,
    telegram: '',
    captain_name: '',
    group_name: '',
    phone: '',
    team_name: '',
    team_id: '',
    players_amount: 0,
  });

  // State to handle errors (you can use a more complex validation object)
  const [formErrors, setFormErrors] = useState({
    telegram: false,
    captain_name: false,
    phone: false,
    team_name: false,
    players_amount: false,
  });

  // Generic handler to update form fields dynamically
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;

    // Update the form state
    setForm(prevState => ({
      ...prevState,
      [name]: value,
    }));

    // Clear the error for the field once the user modifies it
    setFormErrors(prevState => ({
      ...prevState,
      [name]: false,
    }));
  };

  // Optional: Simple validation for required fields (you can extend this)
  const validateForm = () => {
    const errors = {
      telegram: form.telegram.trim() === '',
      captain_name: form.captain_name.trim() === '',
      phone: form.phone.trim() === '',
      team_name: form.team_name.trim() === '',
      players_amount: form.players_amount === null,
    };

    setFormErrors(errors);
    return !Object.values(errors).includes(true);
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Validate the form before submitting
    if (validateForm()) {

      const playersAmount = Number(form.players_amount);
      const formData = { ...form, players_amount: playersAmount };
      console.log('Form submitted:', formData);
      const result = await api.game.register(formData);
      switch (result.status) {
        case "ok":
          setShowSuccessModal(true)
          break
        case "reserve":
          setShowReserveModal(true)
          break
        case "closed":
          setShowTooLateModal(true)
          break
        default:
          break
      }
      setForm({
        game_id: nidNumber,
        telegram: '',
        captain_name: '',
        group_name: '',
        phone: '',
        team_name: '',
        team_id: '',
        players_amount: 0,
      })
    }
  };

  const [showSuccessModal, setShowSuccessModal] = useState(false)
  const [showReserveModal, setShowReserveModal] = useState(false)
  const [showTooLateModal, setShowTooLateModal] = useState(false)

  return (
    <div className="registration-card align-items-center py-4">
      <Modal show={showSuccessModal} className="login-modal" centered>
        <Modal.Header className='d-flex justify-content-between'>
          <Modal.Title>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</Modal.Title>
          <button onClick={()=> setShowSuccessModal(false)} className="btn">
            <Icon path={mdiClose} size={1} color={"#e0ac59"}></Icon>
          </button>
        </Modal.Header>
        <Modal.Body className="text-white">
          –ü–µ—Ä–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ö–≤–∏–∑ON —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚Äî —Ç–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! 
          <br />
          –ü–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–∞¬†{getDialogMap(nidNumber)} –∏–≥—Ä–µ –ë–∞—É–º–∞–Ω—Å–∫–æ–π –ª–∏–≥–∏ –ö–≤–∏–∑ON. 
          <br />
          –ù–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ –∏–≥—Ä–∞ –ø—Ä–æ–π–¥–µ—Ç: 23 –æ–∫—Ç—è–±—Ä—è, 19:00
          <br />
          –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∏–≥—Ä–µ!
        </Modal.Body>
      </Modal>
      <Modal show={showReserveModal} className="login-modal" centered>
        <Modal.Header className='d-flex justify-content-between'>
          <Modal.Title>–û–π üôà! </Modal.Title>
          <button onClick={()=> setShowReserveModal(false)} className="btn">
            <Icon path={mdiClose} size={1} color={"#e0ac59"}></Icon>
          </button>
        </Modal.Header>
        <Modal.Body className="text-white">
          <div>
          –ö–∞–∂–µ—Ç—Å—è, –º–µ—Å—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Å—Ç–∞–≤–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.
          <br />
          –í–∞—à—É –∫–æ–º–∞–Ω–¥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤ —Ä–µ–∑–µ—Ä–≤.
          <br />
          –°–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂—É—Ç—Å—è, –∞ –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –æ—Å–≤–æ–±–æ–¥—è—Ç—Å—è ‚Äì —Å–æ–æ–±—â–∞—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–∞—Ç –º–µ—Å—Ç–æ –Ω–∞ –∏–≥—Ä–µ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏.
          </div>
          
        </Modal.Body>
      </Modal>
      <Modal show={showTooLateModal} className="login-modal" centered>
        <Modal.Header className='d-flex justify-content-between'>
          <Modal.Title>–ò–∑–≤–∏–Ω–∏ üôà!</Modal.Title>
          <button onClick={()=> setShowTooLateModal(false)} className="btn">
            <Icon path={mdiClose} size={1} color={"#e0ac59"}></Icon>
          </button>
        </Modal.Header>
        <Modal.Body className="text-white">
          –ö–∞–∂–µ—Ç—Å—è, –º–µ—Å—Ç–∞ –Ω–∞ –∏–≥—Ä—É –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.
          <br />
          –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è!
        </Modal.Body>
      </Modal>
      <div className="register-header text-white fw-bold">–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê –ò–ì–†–£</div>
      <div className="game-num fw-bold">{getOrdinal(nidNumber)} –∏–≥—Ä–∞ –ë–∞—É–º–∞–Ω—Å–∫–æ–π –ª–∏–≥–∏ 24/25</div>
      <div className='info-container'>
        <div className="d-flex align-items-center my-1">
          <Icon path={mdiClockTimeThree} size={1} color="#e0ac59" />
          <div className="info-text">23 –æ–∫—Ç—è–±—Ä—è, –°–† 19:00</div>
        </div>
        <div className="d-flex align-items-center my-1">
          <Icon path={mdiMapMarker} size={1} color="#e0ac59" />
          <div className="info-text">345 –∞—É–¥–∏—Ç–æ—Ä–∏—è (–ì–£–ö –ú–ì–¢–£ –∏–º. –ù.–≠. –ë–∞—É–º–∞–Ω–∞)</div>
        </div>
        <div className="d-flex align-items-center my-1">
          <Icon path={mdiAlert} size={1} color="#e0ac59" />
          <div className="info-text">–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã</div>
        </div>
      </div>
      <form onSubmit={handleSubmit} className="">

      {[
        { name: 'captain_name', title:'–ò–ú–Ø –ö–ê–ü–ò–¢–ê–ù–ê', placeholder: '–ù–∏–∫–æ–ª–∞–π –≠—Ä–Ω–µ—Å—Ç–æ–≤–∏—á –ë–∞—É–º–∞–Ω' },
        { name: 'group_name', title:'–£–ß–ï–ë–ù–ê–Ø –ì–†–£–ü–ü–ê –ö–ê–ü–ò–¢–ê–ù–ê', placeholder: '–°–ú1-11' },
        { name: 'phone', title:'–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê', placeholder: '8(999)888-77-66' },
        { name: 'telegram', title:'TELEGRAM', placeholder: '@quizonmsk' },
        { name: 'team_name', title:'–ù–ê–ó–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´', placeholder: '–ö–≤–∏–∑ON' },
        { name: 'team_id', title:'ID –ö–û–ú–ê–ù–î–´', placeholder: '123456' },
        { name: 'players_amount', title:'–ö–û–õ–ò–ß–ï–°–¢–í–û –ß–ï–õ–û–í–ï–ö', placeholder: '6' },
      ].map(field => (
        <div key={field.name} className='block-input'>
          <div className="block-text">
            {field.title} <span className="star">*</span>
          </div>
          {field.name === 'phone' ? (
            <InputMask
              mask="8(999)999-99-99"
              value={form[field.name as keyof typeof form] ?? ''}
              onChange={handleInputChange}
            >
              {(inputProps: any) => (
                <input
                  {...inputProps}
                  name={field.name}
                  id={field.name}
                  required={!['team_id', 'group_name'].includes(field.name)}
                  className={`input ${(formErrors as Record<string, boolean>)[field.name] ? 'error' : ''}`}
                  type="text"
                  placeholder={field.placeholder}
                />
              )}
            </InputMask>
          ) : (
            <input
              name={field.name}
              value={form[field.name as keyof typeof form] ?? ''}
              onChange={handleInputChange}
              id={field.name}
              required={!['team_id', 'group_name'].includes(field.name)}
              className={`input ${(formErrors as Record<string, boolean>)[field.name] ? 'error' : ''}`}
              type={['players_amount', 'phone'].includes(field.name) ? 'number' : 'text'}
              placeholder={field.placeholder}
            />
          )}
          {((formErrors as Record<string, boolean>)[field.name]) && (
            <div className="error-message">This field is required.</div>
          )}
        </div>
      ))}
      
        <button type="submit" className="reg-btn my-5 uppercase">
          –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        </button>

        <div className="agreement">
          –û—Ç–ø—Ä–∞–≤–ª—è—è —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞{" "}
          <a className="agreement-link" href="https://bmstu.ru/about/obrabotka-dannyh" target="_blank" rel="noopener noreferrer">–æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>
        </div>
      </form>
    </div>
  );
};